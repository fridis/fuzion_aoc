dec3_part1 is

  String.is_digit => "0" <= String.this <= "9"
  String.is_symbol => !is_digit && String.this != "."

  lines =>
    o := io.stdin.with ()->
      for
        li list String := nil, li ++ [l]
        l := io.buffered.read_line
      while l != ""  else
        li
    o.val.as_array

  scheme(ls) is
    cp := ls.map x->x.as_codepoints
    a := array2 cp.count cp[0].count i,j->cp[i][j]
    w => a.length1
    h => a.length0
    index [](l,c) =>
      if 0 <= l < h && 0 <= c < w then a[l,c] else "."

    number(l, c i32) is
      len := for res := 1, res+1 while scheme.this[l,c+res].is_digit
      ok := (-1..1) ∃ y -> (-1..len) ∃ x -> scheme.this[l+y,c+x].is_symbol
      val := (0..len-1).map i->scheme.this[l,c+i]
                       .fold String.type.concat
                       .parse_i32
                       .val

    numbers =>
      for res list number := nil, res ++ f
          i in a.indices0
          f := for found list number := nil, found ++ new
                   j in a.indices1
                   p := scheme.this[i,j-1]
                   c := scheme.this[i,j  ]
                   new option number := if !p.is_digit && c.is_digit
                                          number i j
                                        else
                                          nil
               else found
      else res

    parts =>
      numbers.filter x->x.ok
             .map x->x.val
             .fold i32.type.sum

  s := scheme lines
  p := s.parts
  say "$p"
