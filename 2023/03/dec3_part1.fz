dec3_part1 is

  String.is_digit => "0" <= String.this <= "9"
  String.is_symbol => !is_digit && String.this != "."
  bool.as_option(v Lazy T) option T => (bool.this ? TRUE  => v
                                                  | FALSE => nil)

  lines =>
    o := io.stdin.with ()->
      for
        li list String := nil, li ++ [l]
        l := io.buffered.read_line
      while l != ""  else
        li
    o.val.as_array

  scheme(ls) is
    cp := ls.map x->x.as_codepoints
    a := array2 cp.count cp[0].count i,j->cp[i][j]
    w => a.length1
    h => a.length0
    at(l,c i32) =>
      if 0 <= l < h && 0 <= c < w then a[l,c] else "."

    number(l, c i32) is
      len := (0.. & (x -> !(at l c+x).is_digit)).first
      ok bool := (-1..1) ∃ y -> (-1..len) ∃ x -> (at l+y c+x) .is_symbol
      val i32 := ls[l].substring c c+len
                      .parse_i32.val

    numbers =>
      a.index_pairs.flat_map number ij->
        (i,j) := ij
        (!(at i j-1).is_digit &&
          (at i j  ).is_digit   ).as_option number (number i j)

    parts =>
      numbers.map (x -> if x.ok then x.val else 0)
             .fold i32.type.sum

  s := scheme lines
  p := s.parts
  say "$p"
