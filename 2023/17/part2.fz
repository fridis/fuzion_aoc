dec17_part2 is

  input := (io.stdin.with ()->io.buffered.read_lines).val.filter !=""
                                                     .map (.as_codepoints)
  area := array2 input.count input[0].count i,j->input[i][j].parse_i32.val
  xs => area.indices1
  ys => area.indices0

  r => {0}; l => {1}; u => {2}; d => {3}

  part12(min_str8, max_str8) =>
    lm : mutate.
    lm.go ()->
      ix(y, x, dir, str8) => ((y*area.length1+x)*4+dir)*max_str8+str8
      la := (lm.array i32).type.new lm area.length0*area.length1*4*max_str8 -1
      modified := lm.env.new false
      res := lm.env.new i32.type.max

      put(x, y, dir, str8, loss0 i32) =>
        if  (x ∈ xs) && (y ∈ ys) then
          loss := loss0 + area[y,x]
          ol := la[ix y x dir str8];
          if ol < 0 || ol > loss then
            la[ix y x dir str8] := loss
            modified <- true
          if x = xs.upper && y = ys.upper && str8 >= min_str8 && loss < res.get then
            res <- loss

      update =>
        for y in ys do
          for x in xs do
            for dir in r..d do
              for str8 in 0..(max_str8-1) do
                loss := if y=0 && x=0 then 0 else la[ix y x dir str8]
                if loss >= 0 then
                  if (dir = u || dir = d) && str8+1 >= min_str8 || dir = r && str8+1 < max_str8 then put x+1 y r (dir = r ? str8+1 : 0) loss
                  if (dir = u || dir = d) && str8+1 >= min_str8 || dir = l && str8+1 < max_str8 then put x-1 y l (dir = l ? str8+1 : 0) loss
                  if (dir = r || dir = l) && str8+1 >= min_str8 || dir = u && str8+1 < max_str8 then put x y-1 u (dir = u ? str8+1 : 0) loss
                  if (dir = r || dir = l) && str8+1 >= min_str8 || dir = d && str8+1 < max_str8 then put x y+1 d (dir = d ? str8+1 : 0) loss

      put 0 0 r 0 0
      do
        modified <- false
        update
      until !modified.get
      res.get

  part1 => part12 1 3
  part2 => part12 4 10

  say "part1 $part1 part2 $part2"
