dec2 is

  bag(r, g, b i32) is
    ok(d draw) => (r >= d.r &&
                   g >= d.g &&
                   b >= d.b   )

  bag := bag 12 13 14

  draw(s String) is
    cubes := s.split ","
    r := (cubes.map c->(c.ends_with "red"   ? (c.split " ")[1].parse_i32.val : 0)).fold i32.type.sum
    g := (cubes.map c->(c.ends_with "green" ? (c.split " ")[1].parse_i32.val : 0)).fold i32.type.sum
    b := (cubes.map c->(c.ends_with "blue"  ? (c.split " ")[1].parse_i32.val : 0)).fold i32.type.sum

  game(s String) is
    s1 := s.split(":")
    num   := (s1[0].split " ")[1].parse_i32.val
    draws := (s1[1].split ";").map (x->draw x)

  r := io.stdin.with ()->
    for
      score := 0, score + (ok ? g.num : 0)
      l := io.buffered.read_line
    while l != ""
      g := game l
      ok := (g.draws.map (x->bag.ok x)).fold and
    else
      "done: score $score"
  say r

  and : Monoid bool is
    public infix âˆ™ (a, b bool) => a && b
    public e => true
