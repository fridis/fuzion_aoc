dec2 is

  bag(r, g, b i32) is
    ok(d draw) => (r >= d.r &&
                   g >= d.g &&
                   b >= d.b   )

  bag1 := bag 12 13 14

  draw(s String) is
    cubes := s.split ","
    r := (cubes.map c->(c.ends_with "red"   ? (c.split " ")[1].parse_i32.val : 0)).fold i32.type.sum
    g := (cubes.map c->(c.ends_with "green" ? (c.split " ")[1].parse_i32.val : 0)).fold i32.type.sum
    b := (cubes.map c->(c.ends_with "blue"  ? (c.split " ")[1].parse_i32.val : 0)).fold i32.type.sum
    redef as_string => "$r red, $g green, $b blue"

  game(s String) is
    s1 := s.split(":")
    game := s1[0]
    num := (game.split " ")[1].parse_i32.val
    draws := (s1[1].split ";").map (x->draw x)   # NYI: partial `draw` did not work?
    redef as_string => "$game: {draws.as_string "; "}"

  r := io.stdin.with ()->
    for
      score := 0, score + (ok ? g.num : 0)
      l := io.buffered.read_line
    while l != ""
      g := game l
      #  ok := (g.draws.map bag1.ok).fold bool_and_monoid  # NYI: partial does not work here, why?
      ok := (g.draws.map (x->bag1.ok x)).fold bool_and_monoid
      say "$ok: $g"
    else
      "done: score $score"
  say r

  # NYI: PR #2287: this should be defined in base.fum for bool.type:
  bool_and_monoid : Monoid bool is
    public redef infix âˆ™ (a, b bool) => a && b
    public redef e => true
