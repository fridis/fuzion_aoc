dec2 is

  bag(r, g, b) is
    ok(d bag) => (bag.this.r >= d.r &&
                  g >= d.g &&
                  b >= d.b   )
    power => bag.this.r*g*b

  bag_min : Monoid bag is
    public redef infix ∙ (a, b bag) bag =>
      (bag (max a.r b.r)
           (max a.g b.g)
           (max a.b b.b))
    public redef e bag => bag 0 0 0

  bag := bag 12 13 14

  draw(s) =>
    color(col) => s.split ","
                   .map c->(c.ends_with col ? (c.split " ")[1].parse_i32.val : 0)
                   .fold i32.type.sum
    bag (color "red") (color "green") (color "blue")

  game(s) is
    s1 := s.split ":"
    num   := (s1[0].split " ")[1].parse_i32.val
    draws := (s1[1].split ";").map (x->draw x)
    min => draws.fold bag_min

  LM : mutate is
  r := LM ! ()->(io.stdin.reader LM) ! ()->
    for
      score1 := 0, score1 + (ok ? g.num : 0)
      score2 := 0, score2 + g.min.power
      l := io.buffered LM .read_line ? s String => s | * => ""
    while l != ""
      g := game l
      ok := g.draws ∀ bag.ok
    else
      "done: score1 $score1, score2 $score2"
  say r
