dec13_part2 is

  LM : mutate is
  input := LM ! ()->
    (io.stdin.reader LM) ! ()->(io.buffered LM .read_lines)

  areas(inp Sequence String) (list (array2 bool)) =>
    n := (inp.take_while !="").count
    if n=0 then nil
    else inp.split_at n ||> (a,b -> area a : areas (b.drop 1))

  area(inp) =>
    c := inp.map s->s.as_codepoints
    array2 c.count c[0].count i,j->c[i][j]="#"

  mirrors(a, n) =>
    (0..a.length0-2).flat_map i32 i->
                             for s := 0, s+sm
                                 j := 0, j+1
                             while i-j >= 0 && i+j+1 < a.length0
                               sm := (a.indices1.filter ix->a[i-j,ix]!=a[i+j+1,ix]).count
                             else
                               if s = n then [i+1] else []
                    .first 0

  part1 => (areas input).map (a -> 100 * mirrors a 0 + mirrors a.transpose 0) .sum
  part2 => (areas input).map (a -> 100 * mirrors a 1 + mirrors a.transpose 1) .sum

  say "part1 $part1 part2 $part2"
