dec18_part1 is

  input := (io.stdin.with ()->io.buffered.read_lines).val.filter !=""

  data := input.map action
  action(s String) =>
    s3 := s.split " "
    action s3[0] s3[1].parse_i32.val (s3[2].substring 2 8).parse_i32_hex.val
  action(dir String, len i32, col i32) is

  dirs := "UDLR"
  dx := [0,0,-1,+1]
  dy := [-1,+1,0,0]

  part1 =>
    lm : mutate.
    lm.go i32 ()->
      cell(n lm.new String) ref is
      area := array2 cell 1000 1000 _,_->(cell (lm.env.new "."))
      say "start: "
      for px := 500, nx
          py := 500, ny
          min_x := px-1, min min_x px-1
          min_y := py-1, min min_y py-1
          max_x := px+1, max max_x px+1
          max_y := py+1, max max_y py+1
          a in data
          d := (dirs.find a.dir).get
      do
        for i in 0..(a.len-1) do
          area[px+i*dx[d],py+i*dy[d]].n <- "#"
        nx := px + a.len*dx[d]
        ny := py + a.len*dy[d]
      else
        show =>
          for y in min_y..max_y do
            for x in min_x..max_x do
              yak area[x,y].n.get
            say ""
        show
        say "fill: "
        fill(x,y i32) unit =>
          if (min_x <= x <= max_x &&
              min_y <= y <= max_y) then
            if area[x,y].n.get = "." then
              area[x,y].n <- "_"
              fill x-1 y
              fill x+1 y
              fill x y-1
              fill x y+1
        fill min_x min_y
        say "filled: "
        show
        res := lm.env.new 0 # (max_x-min_x+1)*(max_y-min_y+1)
        for y in min_y..max_y do
          for x in min_x..max_x do
            c := area[x,y].n.get
            if c = "#" || c = "." then
              res <- res.get + 1
#          else say "$y: $res"
        res.get
/*
        for res := 0, res + end_x - start_x + 1
            y in min_y..max_y
        do
            start_x := ((min_x..max_x).filter x->area[x,y].n.get).first
            end_x   := ((min_x..max_x).filter x->area[x,y].n.get).last
#            say "$y: $start_x .. $end_x ==> $res"
        else
          res
          */

  say "part1 $part1"
