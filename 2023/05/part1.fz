dec5_part1 is

  public minimum : Monoid i64 is
    public redef infix âˆ™ (a, b i64) => if a < b then a else b
    public redef e => i64.type.max

  input =>
    o := io.stdin.with ()->
      for
        r Sequence u8 := [], r++n
        n := (io.buffered.read_bytes 10000)
      while n.count > 0 else
        r
    ref : String
      utf8 => o.val

  lines := input.split "\n"
  ls := lines.as_array

  seeds := ls[0].split.drop 1
                .map (.parse_i64.val)
                .as_array
  range(start, len i64) is
    r => start + len
    l => start

  maps => maps (ls.drop 2)
  maps(ml) list map => if ml.is_empty || ml.first = "" then nil
                       else
                         h := (ml.drop 1).take_while !=""
                         r := ml.drop h.count+2
                         map ml.first h : maps r
  map(name, s) is
    conversions => s.map (.split)
                    .map (x -> conv x)
    convert(i) =>
      n := mut i
      for c in conversions do
        ni := c.convert i
        if ni != i
          n <- ni
      n.get

  conv(li list String) is
    to   := li[0].parse_i64.val
    from := li[1].parse_i64.val
    len  := li[2].parse_i64.val
    l => from
    r => from+len
    convert(i i64) =>
      if from <= i < from+len then i - from + to else i

  p1 := seeds.map s->
      for v := s, v2
          m in maps
          v2 := m.convert v
      else
        v2
    .fold minimum

  say "part1 $p1"
