dec5_part1 is

  public minimum : Monoid u64 is
    public redef infix âˆ™ (a, b u64) => if a < b then a else b
    public redef e => u64.type.max

  String.strip => String.this.replace " " ""

  input =>
    o := io.stdin.with ()->
      for
        r Sequence u8 := [], r++n
        n := (io.buffered.read_bytes 10000)
      while n.count > 0 else
        r
    ref : String
      utf8 => o.val

#  say input
  lines := input.split "\n"
  say "lines.count is {lines.count}"
  ls := lines.as_array
  say "ls.count is {ls.length}"

  seeds := ls[0].split.drop 1
                .map (.parse_u64.val)
                .as_array

#  say ls
  maps => maps (ls.drop 2)
  maps(ml) list map        => if ml.is_empty || ml.first = "" then nil
                              else
                                h := (ml.drop 1).take_while !=""
                                r := ml.drop h.count+2
                                map h : maps r
  map(s list String) is
    name => s.first
    conversions => (s.drop 1).map (.split)
                             .map (x -> conv x)
    convert(i u64) =>
      n := mut i
      for c in conversions do
        ni := c.convert i
        if ni != i
          n <- ni
      n.get

  conv(l list String) is
    to   := l[0].parse_u64.val
    from := l[1].parse_u64.val
    len  := l[2].parse_u64.val
    convert(i u64) =>
      if from <= i < from+len then i - from + to else i


  say seeds
  say maps
  p1 := seeds.map s->
    for
      v := s, v2
      m in maps
      v2 := m.convert v
    else
      v2
  say (p1.fold minimum)
  /*
  for s in seeds do
    for
      v := s, v2
      m in maps
      v2 := m.convert v
    else
      say "$s -> $v2"
*/
