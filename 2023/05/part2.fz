dec5_part2 is

  minimum : Monoid i64 is
    public redef infix ∙ (a, b i64) i64 => if a < b then a else b
    public redef e i64 => i64.type.max

  minimum_range : Monoid range is
    public redef infix ∙ (a, b range) range => if a.l < b.l then a else b
    public redef e range => range i64.type.max-1 1

  input =>
    LM : mutate is
    o := LM ! ()->(io.stdin.reader LM) ! ()->
      for
        r Sequence u8 := [], r++n
        n := (io.buffered LM .read_bytes 10000)
      while n.count > 0 else
        r
    ref : String is
      public redef utf8 Sequence u8 => o

  lines := input.split "\n"
  ls := lines.as_array

  seeds := ls[0].split.drop 1
                .map (.parse_i64.val)
                .as_array
  seeds2 := array seeds.length/2 i->(range seeds[2*i] seeds[2*i+1])
  range(start, len i64) is
    r => start + len
    l => start

  maps => maps (ls.drop 2)
  maps(ml) list map => if ml.is_empty || ml.first.val = "" then nil
                       else
                         h := (ml.drop 1).take_while !=""
                         r := ml.drop h.count+2
                         map ml.first h : maps r
  map(name, s) is
    conversions => s.map (.split)
                    .map (x -> conv x)
    convert(i) =>
      n := mut i
      for c in conversions do
        ni := c.convert i
        if ni != i
          n <- ni
      n.get

    convert2(r range) =>
      for
        from Sequence range := [r], from2
        res  Sequence range := [], res ++ res2
        c in conversions
        res2  := c.convert2 from true
        from2 := c.convert2 from false
      else
        from ++ res

    convert2s(rs Sequence range) =>
      rs.flat_map range convert2

  conv(li list String) is
    to   := li[0].parse_i64.val
    from := li[1].parse_i64.val
    len  := li[2].parse_i64.val
    l => from
    r => from+len
    convert(i i64) =>
      if from <= i < from+len then i - from + to else i
    convert2(rs, mapped)   => rs.flat_map range s->
      ll := l-s.l
      rl := s.r-r
      il := s.len - (max 0 ll) - (max 0 rl)
      if s.r <= l || s.l >= r    then if mapped then [                    ] else [ s                             ] # not    mapped
      else if ll <= 0 && rl <= 0 then if mapped then [ range to-ll     il ] else [                               ] # fully  mapped
      else if ll <= 0            then if mapped then [ range to+len-il il ] else [               range s.r-rl rl ] # left   mapped
      else if rl <= 0            then if mapped then [ range to        il ] else [ range s.l ll                  ] # right  mapped
      else                            if mapped then [ range to        il ] else [ range s.l ll, range s.r-rl rl ] # middle mapped

  p1 := seeds.map s->
      check !maps.is_empty
      for v := s, m.convert v
          m in maps
      else
        v
    .fold minimum

  p2 := seeds2.flat_map range s->
      check !maps.is_empty
      for v Sequence range := [s], m.convert2s v
          m in maps
      else
        v
    .fold minimum_range
    .l

  say "part1 $p1 part2 $p2"
