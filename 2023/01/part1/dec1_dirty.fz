dec1 is

  # 0 to 9
  codepoint_type_ascii_digit => u32 0x30 .. 0x39
  # NYI: this should be public in codepoint, had to copy it over!

  r := io.stdin.with ()->
    for

      prev_sum := u32 0, sum
      # NYI: would be nice if `u32` would be inferred and not needed explicitly here

      l := io.buffered.read_line
      # NYI: read_line should return a choice of String | end_of_file or similar

      l2 := l.as_codepoints
             .as_list       # NYI: would be good not to need this
             .map (.val)    # NYI: would be good not to need this
             .filter codepoint_type_ascii_digit.contains    # using brand new partial application!

      first := l2.head.get (u32 48) - 48
      #      last  :=  l2.is_empty ? 0 : l2.last        # NYI: does not work since ? : is not lazy on its arguments!

      last  :=  {if l2.is_empty then u32 48 else l2.last} - 48
      # NYI: why this assymmetry between head returning option and last returning the element or panicking?
      # NYI: would be nice if `u32` would be inferred and not needed explicitly here!
      # NYI: can we get rid of the `{`/`}`

      sum := prev_sum + first * 10 + last  # NYI: better type inference for NumLiteral could allow `10 * first`
    # do  # NYI issue #2280: produces "no targets for access" error
    while l != ""
    else
      sum
  say r