dec1 is

  LM : mutate is
  input := LM ! ()->
    (io.stdin.reader LM) ! ()->(io.buffered LM .read_lines).filter !=""

  part1 =>
    for
      sum := 0, sum + 10 * first + last
      l in input
    while l != ""  do
      digits := l.as_codepoints
                .filter x->(codepoint.type.ascii_digit.contains x.val)
      first := digits.first.val.parse_i32.val
      last  := digits.last .val.parse_i32.val
    else
      sum


  part2 =>
    numbers := [
      ("one"  , "1"),
      ("two"  , "2"),
      ("three", "3"),
      ("four" , "4"),
      ("five" , "5"),
      ("six"  , "6"),
      ("seven", "7"),
      ("eight", "8"),
      ("nine" , "9"),
      ]

    text_to_digit(s String) String =>
      if s != ""
        for m in numbers do
          t0,d := m
        until s.starts_with t0
          d + text_to_digit (s.substring (min d.codepoint_length s.codepoint_length))
        else
          s.substring 0 1 + text_to_digit (s.substring 1)
      else
        s

    for
      sum := 0, sum + 10 * first + last
      l in input
    while l != "" do
      d := text_to_digit l
      digits := d.as_codepoints
                .filter x->(codepoint.type.ascii_digit.contains x.val)
      first := digits.first.val.parse_i32.val
      last  := digits.last .val.parse_i32.val
    else
      sum

  say "$part1:$part2"
