dec9_part1 is

  bytes0 =>
    o := io.stdin.with ()->
      for
        r Sequence u8 := [], r++n
        n := (io.buffered.read_bytes 10000)
      while n.count > 0 else
        r
    o.val
  bytes := bytes0
  input :=
    ref : String
      utf8 => bytes
  lines := input.split "\n"
                 .map s->(String.type.from_bytes s.utf8.as_array)
                 .filter !=""
  ls := lines.as_array

  # parse input into sequence of sequence of i32
  seqs := ls.map_sequence s->(s.split.map (.parse_i32.val)).as_array

  # extend given seuence at both ends by one element
  #
  extend(sq Sequence i32) =>
    if sq âˆ€ =0 then                                       # 0..0 is easy, just add 0 on both ends
      [0] ++ sq ++ [0]
    else
      di := extend ((sq.drop 1).zip sq (-))               # extend diffs
      [sq.first - di.first] ++ sq ++ [sq.last + di.last]  # use diffs to add first + last

  ex := seqs.map (s -> extend s)
  part1 => (ex.map (.last )).fold i32.type.sum
  part2 => (ex.map (.first)).fold i32.type.sum

  say "part1 $part1 part2 $part2"
