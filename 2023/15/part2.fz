dec15_part2 is

  input := (io.stdin.with ()->io.buffered.read_line).val

  hash(s String) => s.utf8.reduce 0 (h,c -> (h + c.as_i32) * 17 % 256)

  part1 => input.split "," |> (.map hash) |> sum

  part2 =>
    lm : mutate.
    lm.go i32 ()->
      entry(is_add bool, s Sequence String) is
        k => s[0]
        val  => s[1].trim.parse_i32.val
      hm := (lm.array (Sequence entry)).type.new lm 256 []
      for e in input.split ","
                    .map (e -> if e.contains "=" then e.split "=" |> entry true
                                                 else e.split "-" |> entry false)
      do
        b := hm[hash e.k]
        hm[hash e.k] := if      !e.is_add        then b.filter x->x.k!=e.k
                        else if b âˆƒ (x->x.k=e.k) then b.map    x->if x.k=e.k then e else x
                        else                          b ++ [e]
      else
        hm.indexed.map (||> b,l->
          (l.indexed 1).map (||> n,e->(b+1)*n*e.val) |> sum) |> sum

  say "part1 $part1 part2 $part2"
