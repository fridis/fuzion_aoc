dec10_part1 is

  cp := ((io.stdin.with ()->io.buffered.read_lines).val.filter !="").map s->s.as_codepoints

  # our map
  map := array2 cp.count cp[0].count i,j->cp[i][j]

  at(i,j) => if map.indices0.contains i && map.indices1.contains j then map[i,j] else "."

  # a direction
  dir(di, dj i32,   # delta to move one step in this direction
      next String)  # possible next tiles
  is
    # get next direction using given tile, nil if that tile is not connected
    next(i,j i32) => (next.find (at i j)).map ix->dirs[ix]

    # move one step from i,j and check if that tile connects to i,j
    connects(i,j) => (next i+di j+dj).exists

  # all four directions
  dirs array dir := [ dir -1  0 "|#F7",   # north
                      dir +1  0 "#|LJ",   # south
                      dir  0 +1 "J7-#",   # east
                      dir  0 -1 "LF#-" ]  # west

  # find the start tile coordinates
  start =>
    for ij in map.index_pairs do
      (i,j) := ij
    until map[i,j] = "S"
      ij
    else
      panic "no start found"

  # find the loop:
  loup =>
    lm : mutate.
    lm.go (array2 String) ()->
      lp := array map.length0 i->((lm.array String).type.new lm map.length1 ".")

      (i,j) := start
      for d in dirs
      do
        if d.connects i j
          go d i j

      # recursively go along the pipe
      go(d dir, i0, j0 i32) =>
        ii := i0 + d.di
        jj := j0 + d.dj
        lp[ii][jj] := at ii jj                # record path
        match d.next ii jj
          d dir => go d ii jj
          nil   =>

      # collect the resulting path as an array
      array2 map.length0 map.length1 i,j->lp[i][j]

  part1 =>
    loup.filter !="."     # count the tiles in the loop and divide by 2
        .count / 2

  say "part1 $part1"
