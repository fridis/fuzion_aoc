dec8_part2 =>

  LM : mutate is
  LM ! ()->
    data := (io.stdin LM) ! ()->(io.buffered.read_lines LM)
             .filter !="" .first.val.as_codepoints.map (.parse_i64.val) .as_array
    disk := data.zip ((i64 0 ..).flat_map (n -> id (Sequence i64) [n,-1])) a,b->(a,b)
                .flat_map (||> n,id_ -> id (Sequence i64) ([id_].cycle.take n.as_i32))
                .as_array

    part1 =>
      rev Sequence i64 := disk.filter >=0 .reverse .as_array
      c0 := rev.count
      compacted := disk.reduce (id (Sequence i64) [], rev, 0) (
              rrv,id0 -> rrv |||> res,rv,n ->
                           (h,rr) := if      c0 <= n     then (i64 -1, rv                           )
                                     else if id0 >= 0    then (id0   , rv                           )
                                     else if rv.is_empty then (i64 -1, rv                           )
                                     else                     (rv[0] , id (Sequence i64) (rv.drop 1))
                           (id (Sequence i64) [h]++res, rr, n+1))

      ca := compacted.0.reverse
      ca.zip (i64 0).. id,n->(max 0 id)*n |> sum

    part2 =>
      sz := disk.count
      rev Sequence i64 := disk.reverse.as_array
      mdisk := (mutate.array i64).type.new LM sz.as_i64 0
      for i in disk.indices do
        mdisk[i.as_i64] := disk[i]

      # length of free/allocated ranges at each index
      free := (mutate.array i32).type.new LM sz.as_i64 0
      for p i64 := -1, disk[i]
          pl := 0, l
          i in (sz-1)..0:(-1)
          l := disk[i] = p ? pl+1 : 1
      do
        free[i.as_i64] := l

      for
        l := 0, nl
        p := i64 -1, x
        x in rev
        i in rev.count..0:(-1)
        i2 := i.as_i64
        nl := p = x ? l+1 : 1
      do
        if p != x && p != -1
          for j := 0, j+fl
              j2 := j.as_i64
          while j < i
            fl := free[j2]
          until mdisk[j2]<0 && fl>=l
            for k in 0..l-1 do
              k2 := k.as_i64
              mdisk[j2+k2] := p
              mdisk[i2+k2] := -1
              free[j2+k2] := l-k
          else
            unit

      mdisk.as_array.zip (i64 0).. id,n->(max 0 id)*n |> sum

    say "$part1,$part2"
