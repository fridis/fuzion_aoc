dec18 =>

  wi := envir.args.count > 1 ? envir.args[1].parse_i32.val : 71
  w := wi.as_i64
  inside(x) => 0 <= x < w
  l :=  envir.args.count > 2 ? envir.args[2].parse_i32.val : 1024
  input2 := io.stdin.read_lines.filter !="" .map (.split "," .map s->s.parse_i64.val) .map s->(s[0],s[1])
  input1 := input2.map (||>x,y->(x.as_i32,y.as_i32)) .take l .as_array
  lm : mutate is
  lm ! ()->

    part1 =>
      area := array2 wi wi (x,y -> (input1 ∃ t -> t.0=x && t.1=y))
      corrupt(x,y) => area[x.as_i32,y.as_i32]
      mcost := (mutate.array2 i32).type.new lm w w i32.max
      trace(x,y i64, cost i32) =>
        if inside x && inside y && cost < mcost[x, y] && !corrupt x y
          mcost[x, y] := cost
          trace x+1 y cost+1; trace x y+1 cost+1
          trace x-1 y cost+1; trace x y-1 cost+1
      trace 0 0 0
      mcost[w-1, w-1]

    part2 =>
      area    := (mutate.array2 bool).type.new lm w w false
      leftbot := (mutate.array2 bool).type.new lm w w false
      toprite := (mutate.array2 bool).type.new lm w w false
      for cor in input2 do
        x,y := cor
        area[x,y] := true
        fill leftbot x y (x=0 || y=w-1)
        fill toprite x y (y=0 || x=w-1)

        get(a,xx,yy) => inside xx && inside yy && a[xx,yy]
        get(a,xy) => xy ||> get a

        box(xx,yy) => ((xx-1)..(xx+1)) .combine (yy-1)..(yy+1) x0,y0->(x0,y0)

        fill(a,xx,yy,touches) =>
          if ((touches || (box x y ∃ get a)) &&
              get area xx yy && !a[xx,yy])
            a[xx,yy] := true
            box xx yy .for_each (||> dx,dy -> fill a dx dy true)

      until leftbot[x,y] && toprite[x,y] then "$x,$y"
      else  "never"

    say "$part1:$part2"
