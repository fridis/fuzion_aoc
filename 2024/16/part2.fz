dec16 =>

  input := io.stdin.read_string.split "\n" .as_array .filter !=""
             .map (.as_codepoints) .as_array
  h := input.count
  w := input[0].count
  area := array2 codepoint h w y,x->input[y][x]
  point(y,x) is
    mov(d) =>
      if      d=0 then point y-1 x
      else if d=1 then point y   x-1
      else if d=2 then point y+1 x
      else             point y   x+1
  e := area.index_pairs.filter (||> y,x->area[y,x]="E") .first.val ||> point
  s := area.index_pairs.filter (||> y,x->area[y,x]="S") .first.val ||> point

  cost_of_turns(d1,d2) =>
    if      (d1 = d2)       then 0
    else if (d1 = (d2+2)%4) then 2000
    else                         1000

  lm : mutate is
  costs := lm ! ()->
    mcosts := array2 4 h s,y->
      (mutate.array i32).type.new lm w.as_i64 i32.max

    trace(d, p, cost) =>
      if cost < mcosts[d,p.y][p.x.as_i64] then
        mcosts[d,p.y][p.x.as_i64] := cost
        # try to move
        p2 := p.mov (d+2)%4
        if (".S".contains area[p2.y,p2.x] &&
            cost+1 < mcosts[d,p2.y][p2.x.as_i64] &&
            cost+1 < mcosts[3,s .y][s .x.as_i64]   ) then
          trace d p2 cost+1

        # try to turn
        (1..3).for_each dd->
          trace (d+dd)%4 p (cost + cost_of_turns 0 dd)

    # trace costs backwards starting at e
    (0..3).for_each (d -> trace d e 0)
    array2 4 h ss,yy->mcosts[ss,yy].as_array

  cost(d,p) => costs[d,p.y][p.x];

  part1 => cost 3 s
  part2 =>
    lm ! ()->
      best_paths := (mutate.array2 bool).type.new lm h.as_i64 w.as_i64 false
      mark_best_paths(d, p) =>
        if !best_paths[p.y.as_i64, p.x.as_i64] then
          best_paths[  p.y.as_i64, p.x.as_i64] := true
          if cost 0 p != 0
            min_cst(dd) => cost dd (p.mov dd) +^ cost_of_turns dd d
            cmin := (0..3).map min_cst
                          .reduce i32.max min
            (0..3).for_each (dd -> if min_cst dd = cmin then mark_best_paths dd (p.mov dd))
      mark_best_paths 3 s
      best_paths.as_array.filter id .count

  say "$part1,$part2"
