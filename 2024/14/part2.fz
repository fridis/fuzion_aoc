dec14 =>

  input := io.stdin.read_string
             .replace "," " "
             .replace "\n" " "
             .as_codepoints .filter (c -> "0" <= c <= "9" || c = " " || c = "-") .as_string ""
             .split " " .as_array
             .map (.parse_i32.val)
             .as_4tuples.map ||||>robot

  w := envir.args[1].parse_i32.val
  h := envir.args[2].parse_i32.val

  robot(x,y,vx,vy) is
    move(n) =>
      robot (x+vx*n+w*1000000)%w (y+vy*n+h*1000000)%h vx vy
    quadrant =>
      l := x <= w/2
      t := y <= h/2
      if   x=w/2 || y=h/2 then 0  # middle
      else if t && l      then 1  # top left
      else if t           then 2  # top right
      else if l           then 3  # bottom left
      else                     4  # bottom right

  show(f Sequence robot) =>
    for y in 0..(h-1) do
      for x in 0..(w-1) do
        for c := 0, c+n
            r in f
            n := x=r.x && y=r.y ? 1 : 0
        else
          yak (c=0?".":"M")
      else
        say ""
    else
      say ""

  part1 =>
    (1..4).map q->(input.map (.move 100) .filter r->r.quadrant=q .count) .fold i32.product

  part2 =>
    for i := 0, i+1
        a := input.as_array, array a.length (x->a[x].move 1)

        # xmas tree is boxed: find max num of robots aligned horizontall & vertically
        maxx := (0..(h-1)).map (y -> a.count r->r.y=y) .foldf max 0
        maxy := (0..(w-1)).map (x -> a.count r->r.x=x) .foldf max 0
        maxxy := maxx * maxy
        maxmaxxy := maxxy, max maxmaxxy maxxy

    until maxmaxxy   > 900
      i

  say "$part1,$part2"
