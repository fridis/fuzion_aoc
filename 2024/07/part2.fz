dec7_part2 =>

  LM : mutate is
  input := LM ! ()->((io.stdin LM) ! ()->(io.buffered.read_lines LM)).filter !=""

  total(s) => s.split ":" .first.val.parse_i64.val
  nums(s) => s.split " " .drop 1 .map (.parse_i64.val)
  num0(s) => nums s .first.val
  numr(s) => nums s .drop 1

  test1(t, v, n) =>
    match n.as_list
      nil    => t = v
      c Cons => (test1 t v*c.head c.tail ||
                 test1 t v+c.head c.tail    )

  test2(t, v, n) =>
    t >= v && match n.as_list
      nil    => t = v
      c Cons => (test2 t (v *  c.head) c.tail ||
                 test2 t (v +  c.head) c.tail ||
                 test2 t (v ++ c.head) c.tail   )

  integer.infix ++ (o integer.this) =>
    "{integer.this}$o".parse_integer (integer.this.from_u32 10)
                      .val

  part1 => input.filter (s -> test1 (total s) (num0 s) (numr s))
                .map total |> sum
  part2 => input.filter (s -> test2 (total s) (num0 s) (numr s))
                .map total |> sum

  say part1
  say part2
