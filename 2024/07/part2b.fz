LM : mutate is
input := LM ! ()->(io.stdin.reader LM) ! ()->(io.buffered LM .read_lines).filter !=""

total(s) => s.split ":" .first.val.parse_i64.val
nums(s) => s.split " " .drop 1 .map (.parse_i64.val)

test(ops, t, v, n) =>
  t >= v && match n.as_list
    nil    => t = v
    c Cons => ops âˆƒ (o -> test ops t (o v c.head) c.tail)

partn(ops Sequence (i64,i64)->i64) =>
  input.filter (s -> test ops (total s) (nums s)[0] (nums s .drop 1))
       .map total |> .sum

say (partn [*, +])
say (partn [*, +, (a,b)->"$a$b".parse_i64.val])
