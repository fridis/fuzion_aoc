dec10_part2 =>

  LM : mutate is
  arr := LM ! ()->
          (io.stdin.reader LM) ! ()->(io.buffered LM .read_lines)
             .filter !="" .map (.as_codepoints.map (.parse_i32.get) .as_array) .as_array

  h := arr.length    + 2
  w := arr[0].length + 2
  area  := array2 w+2 h+2 x,y->(1 <= x < w-1 && 1 <= y < h-1 ? arr[y-1][x-1] : 99)

  join1(a,x,y) =>
    container.set_of_ordered (a[x-1,y] ++ (a[x+1,y] ++ (a[x,y-1] ++ a[x,y+1])))
             .as_array
  join2(a,x,y) => a[x-1,y] + a[x+1,y] + a[x,y-1] + a[x,y+1]

  f1(i,a) => i<0 ? a : f1 i-1 (array2 w h (x,y -> area[x,y] = i ? join1 a x y : []))
  f2(i,a) => i<0 ? a : f2 i-1 (array2 w h (x,y -> area[x,y] = i ? join2 a x y : 0 ))

  part1 => f1 8 (array2 w h (x,y -> area[x,y] = 9 ? [w*y+x] : [])) .map (.count) |> .sum
  part2 => f2 8 (array2 w h (x,y -> area[x,y] = 9 ? 1       : 0 ))               |> .sum

  say "$part1,$part2"
