dec10_part2 =>

  LM : mutate is
  arr := LM ! ()->
          (io.stdin LM) ! ()->(io.buffered.read_lines LM)
             .filter !="" .map (.as_codepoints.map (.parse_i32) .as_array) .as_array

  h := arr.length    + 2
  w := arr[0].length + 2
  area  := array2 w+2 h+2 x,y->(1 <= x < w-1 && 1 <= y < h-1 ? arr[y-1][x-1] : 99)

  join(a,b,c,d) =>
    for res Sequence i32 := [], res.contains x ? res : [x]++res
        x in a ++ (b ++ (c ++ d))
    else
      res.as_array

  part1 =>
    a9 := array2 w h (x,y -> area[x,y] = 9 ? [w*y+x] : [])
    for i := 9, i-1
        a := a9, array2 w h (x,y -> area[x,y] = i ? join a[x-1,y] a[x+1,y] a[x,y-1] a[x,y+1] : [])
    while i>0 else
      a.map (.count) |> sum

  part2 =>
    a9 := array2 w h (x,y -> area[x,y] = 9 ? 1 : 0)
    for i := 9, i-1
        a := a9, array2 w h (x,y -> area[x,y] = i ? a[x-1,y]+a[x+1,y]+a[x,y-1]+a[x,y+1] : 0)
    while i>0 else
      sum a

  say "$part1,$part2"
