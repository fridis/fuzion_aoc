dec22 is

  input := io.stdin.read_lines.filter !="" .map (.parse_i64.val) .as_array

  next(s0 i64) =>
    s1 := s0 * 64
    s2 := s0 ^ s1
    s3 := s2 % 16777216
    s4 := s3 / 32
    s5 := s3 ^ s4
    s6 := s5 % 16777216
    s7 := s6 * 2048
    s8 := s6 ^ s7
    s8  % 16777216

  secrets(x) => x :: next

  prices(seed) : memoize => keep seed _->
    secrets seed .map %10 .take 2001 .as_array
  changes(seed) : memoize => keep seed _->
    prices seed .map (-) .map_pairs (-) .as_array

  part1 =>
    input.map (seed -> secrets seed .drop 2000 .first.val) |> sum

  part2 =>
    range => i64 -9 .. 9
    N := input.count
    Ns := 0..(N-1)
    cs := array N (i -> changes input[i])

    arr(o,off,v) => array N (i -> o[i].filter j->cs[i][j+off]=v .as_array)

    oa := array N i->(cs[i] .indexed .filter (t -> t ||> j,v -> j<1997) .map (t -> t ||> j,v->j) .as_array)
    (range      .map (a -> arr oa 0 a) .flat_map aa->
       range    .map (b -> arr aa 1 b) .flat_map ba->
         range  .map (c -> arr ba 2 c) .flat_map ca->
           range.map d->
             (Ns.flat_map i64 i->
               ca[i].filter   (j -> cs[i][j+3]=d)
                    .flat_map (j -> (prices input[i]).drop j+4)
                    .first                                      ) |> sum)
      .fold1 max

  say "$part1:$part2"
