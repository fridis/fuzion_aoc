dec22 is

  input := io.stdin.read_lines.filter !="" .map (.parse_i64.val) .as_array

  i64.mixAndPrune(f i64->i64) => (val ^ f val) % 16777216
  next(s0 i64) =>
    s0.mixAndPrune (*64)
      .mixAndPrune (/32)
      .mixAndPrune (*2048)

  secrets(x) => x :: next

  prices(seed) : memoize => keep seed _->
    secrets seed .map %10 .take 2001 .as_array
  changes(seed) : memoize => keep seed _->
    prices seed .map (-) .map_pairs (-) .as_array

  part1 =>
    input.map (seed -> secrets seed .drop 2000 .first.val) |> sum

  part2 =>
    range => i64 -9 .. 9
    n := input.count
    cs := array n (i -> changes input[i])

    # create array of array of indices of sequences that match currently
    # tested sequence up to index off. o is the previous array, v is the
    # value expected at current offset.
    #
    arr(o,off,v) => array n (i -> o[i].filter j->cs[i][j+off]=v .as_array)

    r := array n _->(0..1996).as_array
    (range      .map (arr r 0) .flat_map a->
       range    .map (arr a 1) .flat_map b->
         range  .map (arr b 2) .flat_map c->
           range.map d->
             ((0..(n-1)).flat_map i64 i->
               c[i].filter   (j -> cs[i][j+3] = d)
                   .flat_map (j -> prices input[i] .drop j+4)
                   .first
             ) |> sum
    ).fold1 max

  say "$part1:$part2"
