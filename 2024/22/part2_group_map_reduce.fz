dec22 is

  input := io.stdin.read_lines.filter !="" .map (.parse_i64.val) .as_array

  i64.mixAndPrune(f i64->i64) => (val ^ f val) % 16777216
  i64.secrets => val :: .mixAndPrune *64 .mixAndPrune /32 .mixAndPrune *2048

  part1 =>
    input.map (.secrets.drop 2000 .first.val) |> sum

  # Part 2 is based on a solution in Scala by Karl Bielefeldt (@kbielefe)
  # https://github.com/kbielefe/advent-of-code/blob/c49990a39a76f8b7c60594e1a9ee20d097815e37/2024/src/main/scala/22%20Monkey%20Market.scala
  part2 =>
    input
      .flat_map (.secrets
                 .take 2001
                 .map %10
                 .sliding 5
                 .group_map_reduce (.map_pairs (-) .as_array.as_orderable) (.last.val) x,_->x
                 .items)
      .group_map_reduce x->x.0 x->x.1 (+)
      .values
      .max

  say "$part1:$part2"
