dec2_part2 is

  LM : mutate is
  input := LM ! ()->((io.stdin LM) ! ()->(io.buffered.read_lines LM)).filter !=""

  data := input.map (.split " "
                     .map (.parse_i32.val))

  mono(s)  => s.map_pairs (<=)
               .map_pairs (=) âˆ€ id
  diffs(s) => s.map_pairs a,b->(|a-b|) âˆ€ âˆˆ(1..3)

  part1(d) => d.filter mono
               .filter diffs
               .count

  part1 => part1 data

  parts(l, r Sequence i32) =>
    if r.count = 1
      l : nil
    else
      rh := r.take 1
      rt := r.drop 1
      h Sequence i32 := l++rt
      h : parts (l ++ rh) rt

  part2 => data.filter (x -> part1 (parts [] x) > 0)
               .count

  say part1
  say part2
