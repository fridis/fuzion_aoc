dec17 =>

  input := io.stdin.read_lines
  get(prefx) => input.filter (.starts_with prefx) .first.val.replace prefx ""
  initial_A := get "Register A: " .parse_i64.val
  initial_B := get "Register B: " .parse_i64.val
  initial_C := get "Register C: " .parse_i64.val
  code := get "Program: " .split "," .map (.parse_i64.val) .as_array

  regs(a,b,c,pc,out) is
    ins => code[pc].as_i32
    op  => code[pc+1]
    combo => if      op < 4 then op
             else if op = 4 then a
             else if op = 5 then b
             else if op = 6 then c
             else panic "reserved op $op"
    div => a >> combo

  exec array regs->regs :=
    [s -> regs s.div s.b       s.c         s.pc+2             s.out             ,
     s -> regs s.a   s.b^s.op  s.c         s.pc+2             s.out             ,
     s -> regs s.a   s.combo%8 s.c         s.pc+2             s.out             ,
     s -> regs s.a   s.b       s.c   s.a=0?s.pc+2:s.op.as_i32 s.out             ,
     s -> regs s.a   s.b^s.c   s.c         s.pc+2             s.out             ,
     s -> regs s.a   s.b       s.c         s.pc+2             s.out++[s.combo%8],
     s -> regs s.a   s.div     s.c         s.pc+2             s.out             ,
     s -> regs s.a   s.b       s.div       s.pc+2             s.out             ]

  run(s) =>
    if 0 <= s.pc < code.length then run (exec[s.ins].call s)
    else                            s.out
  runa(a) => run (regs a initial_B initial_C 0 (id (Sequence i64) []))

  part1 => (runa initial_A).as_string ","
  part2 =>
    for i := 15, i-1
        delta := i64 0o1000000000000000, delta / 8
        a := i64 0, new_a
    while delta > 0
      new_a := for na := a, na + delta
               until ((runa na).drop i).as_equatable = (code.drop i).as_equatable then na
    else
      a

  say "$part1:$part2"
