dec12 =>

  input := io.stdin.read_lines.filter !="" .map (.as_codepoints)
  w := input[0].count
  h := input.count
  data := array2 w+2 h+2 x,y->(1<=x<=w && 1<=y<=h ? input[y-1][x-1] : "0")

  lm : mutate is
  lm ! ()->

    part1 =>
      tot := lm.env.new 0
      done := (mutate.array2 bool).new lm (w+2).as_i64 (h+2).as_i64 false
      for xx in 1..w do
        for yy in 1..h do
          kind := data[xx,yy]
          (a,l) := fill xx yy
          fill(x,y) =>
            if      kind != data[x,y]       then (0, 1)
            else if done[x.as_i64,y.as_i64] then (0, 0)
            else
              done[x.as_i64,y.as_i64] := true
              (a1,l1) := if kind = data[x,y] then fill x+1 y   else (0,1)
              (a2,l2) := if kind = data[x,y] then fill x   y+1 else (0,1)
              (a3,l3) := if kind = data[x,y] then fill x-1 y   else (0,1)
              (a4,l4) := if kind = data[x,y] then fill x   y-1 else (0,1)
              (1+a1+a2+a3+a4, l1+l2+l3+l4)
          tot <- a*l + tot
      tot.get

    part2 =>
      tot := lm.env.new 0
      done := (mutate.array2 bool).new lm (w+2).as_i64 (h+2).as_i64 false
      for xx in 1..w do
        for yy in 1..h do
          kind := data[xx,yy]
          (a,s) := fill xx yy
          tot <- a*s + tot

          fill(x,y) =>
            if kind != data[x,y] || done[x.as_i64,y.as_i64] then (0, 0)
            else
              done[x.as_i64,y.as_i64] := true
              (a1,s1) := if kind = data[x,y] then fill x+1 y   else (0,1)
              (a2,s2) := if kind = data[x,y] then fill x   y+1 else (0,1)
              (a3,s3) := if kind = data[x,y] then fill x-1 y   else (0,1)
              (a4,s4) := if kind = data[x,y] then fill x   y-1 else (0,1)
              (1+a1+a2+a3+a4, s1+s2+s3+s4+ corners x y)

          corners(x,y) => ecken(4, array2 3 3 dx,dy->data[x-1+dx,y-1+dy]=kind)

          ecken(n, m) =>
            if n=0 then 0 else
              ((/* inner */ m[0,0] && m[0,1] && !m[1,0] ||
                /* outer */          !m[0,1] && !m[1,0] ? 1 : 0) +
               ecken n-1 (array2 3 3 x,y->m[2-y,x]))   # turn 90Â°

      tot.get

    say "$part1,$part2"
