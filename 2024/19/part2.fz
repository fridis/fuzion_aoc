dec19 =>

  input := io.stdin.read_lines
  towels := input[0].split ", " .as_array
  designs := input.drop 2 .filter !=""

  String.suffix(prfx) => substring prfx.byte_length

  M : mutate is
  M ! ()->
    cachePos := (container.mutable_tree_map M String bool).empty
    cacheCnt := (container.mutable_tree_map M String i64 ).empty

    possible(s) =>
      match cachePos.get s
        v bool => v
        nil    => res := s="" || !towels.filter s.starts_with
                                        .map s.suffix
                                        .filter possible
                                        .is_empty
                  cachePos.put s res
                  res

    count(s String) =>
      match cacheCnt.get s
        v i64 => v
        nil   => res := s="" ? (i64 1) : towels.filter s.starts_with # NYI: CLEANUP: explicit type should not be necessary when type inference improves, see #5866
                                               .map s.suffix
                                               .map count
                                               .sum
                 cacheCnt.put s res
                 res

    part1 => designs.filter possible .count
    part2 => designs.map count
                    .sum

    say "$part1:$part2"
