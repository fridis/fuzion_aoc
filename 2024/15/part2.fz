dec15 =>

  input := io.stdin.read_string
             .split "\n\n"
  input1 := input[0].split "\n" .map (.as_codepoints)
  input2 := input[1].replace "\n" ""
  h := input1.count
  w := input1[0].count
  area := array2 codepoint h w y,x->input1[y][x]

  dir(s) =>
    if      s = "^" then (i64  0, i64 -1)
    else if s = "v" then (i64  0, i64  1)
    else if s = "<" then (i64 -1, i64  0)
    else if s = ">" then (i64  1, i64  0)
    else panic "dir unknown $s"

  lm : mutate is

  show(a mutate.array2 String) =>
    for syx in a.index_pairs do
      yak (syx ||> sy,sx->a[sy,sx])
      if syx.1 = a.length1-1 then say ""

  part1 =>
    lm ! ()->
      a := (mutate.array2 String).type.new lm h.as_i64 w.as_i64 ""
      rx := lm.env.new (i64 0)
      ry := lm.env.new (i64 0)
      move(xx, yy, d) option (i64,i64)=>
        nx := xx + d.0
        ny := yy + d.1
        v := a[ny,nx]
        if v = "#" then nil
        else if v = "O" then
          match move nx ny d
            nil => nil
            _ tuple =>
              a[ny,nx] := a[yy,xx]
              a[yy,xx] := "."
              (nx,ny)
        else if v = "." then
          a[ny,nx] := a[yy,xx]
          a[yy,xx] := "."
          (nx,ny)
        else
          panic "found $v"

      for yx in a.index_pairs do
        y,x := yx
        a[y,x] := area[y.as_i32,x.as_i32]

      for yx in a.index_pairs do
      until yx ||> y,x->a[y,x] = "@"
        rx <- yx.1
        ry <- yx.0
        input2.as_codepoints.for_each s->
          d := dir s
          match move rx.get ry.get d
            nil => unit
            t tuple i64 i64 => rx <- t.0; ry <- t.1
      else
        panic "robot not found"

      a.index_pairs
       .map ||>y,x->a[y,x]="O"?y*100+x:(i64 0) # NYI: CLEANUP: explicit type should not be necessary when type inference improves, see #5866
       .sum


  part2 =>
    lm ! ()->
      a := (mutate.array2 String).type.new lm h.as_i64 (2*w).as_i64 ""
      ryx := lm.env.new (i64 0, i64 0)

      moveH(yyxx, d) option (i64,i64)=>
        yy,xx := yyxx
        nx := xx + d
        v := a[yy,nx]
        if v = "#" then nil
        else if v = "[" || v = "]" then
          match moveH (yy,nx) d
            nil => nil
            _ tuple =>
              a[yy,nx] := a[yy,xx]
              a[yy,xx] := "."
              (yy,nx)
        else if v = "." then
          a[yy,nx] := a[yy,xx]
          a[yy,xx] := "."
          (yy,nx)
        else
          panic "found $v"

      move_ixs(xxs) => (0..2*w-1).filter nx->xxs[nx]
      move_blks(xxs,ny) => move_ixs xxs .map nx->a[ny,nx.as_i64]
      nxxs(ny, xxs) => array 2*w (nx -> (a[ny,nx.as_i64] = "[" && (xxs[nx  ] || xxs[nx+1]) ||
                                         a[ny,nx.as_i64] = "]" && (xxs[nx-1] || xxs[nx  ])   ))

      can_moveV(xxs, yy, d) =>
        ny := yy + d
        (!(move_blks xxs ny ∃ ="#") &&
         ((move_blks xxs ny ∀ =".") ||
          can_moveV (nxxs ny xxs) ny d))

      do_moveV(xxs, yy, d) =>
        if move_blks xxs yy ∃ !="." then
          do_moveV (nxxs yy+d xxs) yy+d d
          move_ixs xxs .for_each (nx -> a[yy+d,nx.as_i64] := a[yy,nx.as_i64]; a[yy,nx.as_i64] := ".")

      moveV(d) option (i64,i64) =>
        xxs := array 2*w =ryx.get.1.as_i32
        y,x := ryx.get
        if can_moveV xxs y d then  do_moveV xxs y d; (y+d, x)
        else                                         nil

      for yx in a.index_pairs do
        y,x := yx
        v := area[y.as_i32,x.as_i32/2]
        v1 := if      v = "O" then ["[","]"]
              else if v = "@" then ["@","."]
              else                 [v  ,v  ]
        a[y,x] := v1[x.as_i32 % 2]

      for yx in a.index_pairs until yx ||> y,x->a[y,x] = "@"
        ryx <- yx
        input2.as_codepoints.for_each s->
          f => if      "^v".contains s then d := ("^-v".find s).val.as_i64-1; moveV d
               else if "<>".contains s then d := ("<->".find s).val.as_i64-1; moveH ryx.get d
               else panic "dir unknown $s"

          match f
            nil     =>
            t tuple => ryx <- t
      else
        panic "robot not found"

      a.index_pairs.map ||>y,x->a[y,x]="["?y*100+x:(i64 0) # NYI: CLEANUP: explicit type should not be necessary when type inference improves, see #5866
                   .sum

  say "$part1,$part2"
