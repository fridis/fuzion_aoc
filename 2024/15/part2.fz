dec14 =>

  input := io.stdin.read_string
             .split "\n\n"
  input1 := input[0].split "\n" .map (.as_codepoints)
  input2 := input[1].replace "\n" ""
  h := input1.count
  w := input1[0].count
  area := array2 codepoint h w y,x->input1[y][x]

  dir(s) =>
    if      s = "^" then (i64  0, i64 -1)
    else if s = "v" then (i64  0, i64  1)
    else if s = "<" then (i64 -1, i64  0)
    else if s = ">" then (i64  1, i64  0)
    else panic "dir unknown $s"

  lm : mutate is

  show(a mutate.array2 String) =>
    for syx in a.index_pairs do
      yak (syx ||> sy,sx->a[sy,sx])
      if syx.1 = a.length1-1 then say ""

  part1 =>
    lm ! ()->
      a := (mutate.array2 String).type.new lm h.as_i64 w.as_i64 ""
      rx := lm.env.new (i64 0)
      ry := lm.env.new (i64 0)
      move(xx, yy, d) option (i64,i64)=>
        nx := xx + d.0
        ny := yy + d.1
        v := a[ny,nx]
        if v = "#" then nil
        else if v = "O" then
          match move nx ny d
            nil => nil
            _ tuple =>
              a[ny,nx] := a[yy,xx]
              a[yy,xx] := "."
              (nx,ny)
        else if v = "." then
          a[ny,nx] := a[yy,xx]
          a[yy,xx] := "."
          (nx,ny)
        else
          panic "found $v"

      for yx in a.index_pairs do
        (y,x) := yx
        a[y,x] := area[y.as_i32,x.as_i32]

      for yx in a.index_pairs do
      until yx ||> y,x->a[y,x] = "@"
        rx <- yx.1
        ry <- yx.0
        input2.as_codepoints.for_each s->
          d := dir s
          match move rx.get ry.get d
            nil => unit
            t tuple i64 i64 => rx <- t.0; ry <- t.1
      else
        panic "robot not found"

      a.index_pairs
       .map ||>y,x->a[y,x]="O"?y*100+x:0 |> sum


  part2 =>
    lm ! ()->
      a := (mutate.array2 String).type.new lm h.as_i64 (2*w).as_i64 ""
      rx := lm.env.new (i64 0)
      ry := lm.env.new (i64 0)

      moveH(xx, yy, d) option (i64,i64)=>
        nx := xx + d
        v := a[yy,nx]
        if v = "#" then nil
        else if v = "[" || v = "]" then
          match moveH nx yy d
            nil => nil
            _ tuple =>
              a[yy,nx] := a[yy,xx]
              a[yy,xx] := "."
              (nx,yy)
        else if v = "." then
          a[yy,nx] := a[yy,xx]
          a[yy,xx] := "."
          (nx,yy)
        else
          panic "found $v"

      can_moveV(xxs, yy, d) =>
        ny := yy + d
        if      (0..2*w-1) ∃ nx ->  xxs[nx] && a[ny,nx.as_i64]="#" then false
        else if (0..2*w-1) ∀ nx -> !xxs[nx] || a[ny,nx.as_i64]="." then true
        else
          nxxs := array 2*w (nx -> (a[ny,nx.as_i64] = "[" && (xxs[nx  ] || xxs[nx+1]) ||
                                    a[ny,nx.as_i64] = "]" && (xxs[nx-1] || xxs[nx  ])   ))
          can_moveV nxxs ny d

      do_moveV(xxs, yy, d) =>
          ny := yy + d
          if (0..2*w-1) ∃ nx -> xxs[nx] && a[yy,nx.as_i64]!="." then
            nxxs := array 2*w (nx -> (a[ny,nx.as_i64] = "[" && (xxs[nx  ] || xxs[nx+1]) ||
                                      a[ny,nx.as_i64] = "]" && (xxs[nx-1] || xxs[nx  ])    ))
            do_moveV nxxs ny d
            (0..2*w-1).for_each (nx -> { if xxs[nx] then
                                           a[ny,nx.as_i64] := a[yy,nx.as_i64]
                                           a[yy,nx.as_i64] := "."})
          else
#            say "NOTHING TO BE DONE do_moveV $xxs $yy $d"

      moveV(xx, yy, d) =>
        xxs := array 2*w =xx.as_i32
        if can_moveV xxs yy d then
          do_moveV xxs yy d
          true
        else
          false

      for yx in a.index_pairs do
        (y,x) := yx
        v := area[y.as_i32,x.as_i32/2]
        v1 := if      v = "O" then ["[","]"]
              else if v = "@" then ["@","."]
              else                 [v  ,v  ]
        a[y,x] := v1[x.as_i32 % 2]

      for yx in a.index_pairs do
      until yx ||> y,x->a[y,x] = "@"
        rx <- yx.1
        ry <- yx.0
#        say "{yx.1},{yx.0}"
        input2.as_codepoints.for_each s->
          nr option (tuple i64 i64) :=
                if      s = "^" then if (moveV rx.get ry.get (i64 -1)) then (rx.get, ry.get-1) else nil
                else if s = "v" then if (moveV rx.get ry.get (i64 +1)) then (rx.get, ry.get+1) else nil
                else if s = "<" then moveH rx.get ry.get (i64 -1)
                else if s = ">" then moveH rx.get ry.get (i64 +1)
                else panic "dir unknown $s"
#          say "did_moveV "

          match nr
            nil => unit
            t tuple i64 i64 => rx <- t.0; ry <- t.1
#          say d
#        show2 a
      else
        panic "robot not found"

      a.index_pairs.map ||>y,x->a[y,x]="["?y*100+x:0 |> sum

  say "$part1,$part2"
