dec11 =>

  LM : mutate is
  data := LM ! ()->(io.stdin LM) ! ()->(io.buffered.read_lines LM)
       .first.val .split " " .map (.parse_i64.val)

  blink(b i64) =>
    M : mutate is
    M ! ()->
      cache := (container.mutable_tree_map M i64 i64).empty

      count(i, n) i64 ! M =>
        k := i << 50 | n;
        match cache[k]
          nil => l := ($n).byte_length.as_i64
                 res := if      i=0    then 1
                        else if n=0    then count i-1 1
                        else if l %% 2 then f := (i64 10)**(l/2);
                                            count i-1 n/f + count i-1 n%f
                        else                count i-1 n*2024
                 cache.put k res
                 res
          r i64 => r

      data.map (count b) |> sum

  part1 => blink 25
  part2 => blink 75

  say "$part1,$part2"
