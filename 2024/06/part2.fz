dec6_part2 =>

  LM : mutate is
  LM ! ()->
    input := io.stdin.reader LM ! (() -> io.buffered LM .read_lines)

    # the relation defined by input as an array
    arr := input.filter !=""
                .map (.codepoints.as_array)
                .as_array

    h := arr.length.as_i64
    w := arr[0].length.as_i64

    data := array2 arr.length arr[0].length y,x->arr[y][x]
    area := (mutate.array2 codepoint).type.new LM h w "0"
    area.index_pairs
        .for_each ||>y,x->
          area[y,x] := data[y.as_i32, x.as_i32]

    start := data.index_pairs.filter (yx -> data[yx.0,yx.1] = "^")
                             .first.val ||> y,x -> pos y.as_i64 x.as_i64

    # direction, bit gives a unique bit 1, 2, 4, 8
    dir(dy, dx i64) is
      turn => dir dx -dy
      bit => (dx = 0 ? (dy+3)*2 : (dx+3)/2).as_u8

    # up is the only dir we need, the others are the result of calls to turn
    up => dir -1 0

    # a position is our most important helper feature
    pos(y,x) is

      # move position in given direction
      infix +(d) => pos y+d.dy x+d.dx

      # is position inside our area
      ok => 0 <= y < h && 0 <= x < w

      # get or set value in given mutable array2
      get(a container.Mutable_Array2 X LM) => a[y,x]
      put(a container.Mutable_Array2 X LM, v X) => a[y,x] := v

      # is this equal to o?
      infix =(o) => y=o.y && x=o.x

      # does given dir change at this position, return the new dir
      #
      # f checks if pos is blocked, i.e., we must turn
      #
      change_dir(d dir, f pos->bool) =>
        for dd := d, dd.turn
            p := infix + dd
        while p.ok && f p else
          dd

    # candidate positions  that should be checked in part2, filled in part1
    cand := (mutate.array2 bool).type.new LM h w false

    # perform part1 and fill cand
    part1_res := LM.env.new 0
    _ := for d := up, p.change_dir d q->{q.put cand true; q.get area = "#"}
             p := start, p + d
         while p.ok
           if p.get area != "X"
             p.put area "X"
             part1_res <- 1 + part1_res

    part1 => part1_res.get

    part2 =>
      area.index_pairs
          .map (c -> c ||> pos)
          .filter (p -> p.get cand && p.get area != "#")
          .filter cp->
              visited := (mutate.array2 u8).type.new LM h w 0
              for d := up, p.change_dir d q->(q.get area = "#" || q = cp)
                  p := start, p + d
                  loup := false, (v & d.bit) != 0
              while p.ok && !loup
                v := p.get visited
                p.put visited (v | d.bit)
          .count

    say part1
    say part2
